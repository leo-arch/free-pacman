#!/usr/bin/env bash

# Little pacman wrapper to make pacman free-software aware. This script
#+ checks all packages to be installed against Parabola's blacklist,
#+ warns the user if the package is non-free, and then, if the user
#+ accepts, install the corresponding package.

#+ It also adds this new option:
#+ -f | --checkfree (check for non-free installed packages)
#+ -L | --add-libre (Add and enable [libre] repository)

### COLORS ###

white="\033[0m\e[1m"
green="\033[1;32m"
red="\033[1;31m"
blue="\033[1;34m"
yellow='\033[1;33m'
bold='\033[1m'
nc="\033[0m"

### PROGRAM DATA ###

ME="pacfree"
VERSION="0.3.3"
AUTHOR="L. Abramovich"
DATE="Dec, 2020"
source="https://git.parabola.nu/blacklist.git/plain/blacklist.txt"
blacklist_file="/tmp/pacman_pkgs_bl"

### EXIT CODES ###

EXIT_SUCCESS=0
EXIT_FAILURE=1

### FUNCTIONS ###

function echoerr ()
{
	echo -e "$@" >&2
}

function help
{
	arg="$1"
	case $arg in
		help)
			echo -e "${ME}, the free-software aware pacman\nusage:  \
$ME <operation> [...]
operations:
	$ME {-h --help}
	$ME {-V --version}
	$ME {-D --database}  <options> <package(s)>
	$ME {-F --files}     [options] [package(s)]
	$ME {-Q --query}     [options] [package(s)]
	$ME {-R --remove}    [options] <package(s)>
	$ME {-S --sync}      [options] [package(s)]
	$ME {-T --deptest}   [options] [package(s)]
	$ME {-U --upgrade}   [options] <file(s)>
	$ME {-f --checkfree}
	$ME {-L --add-libre}

use '$ME {-h --help}' with an operation for available options"
		;;

		"checkfree")
			echo -e "List all non-free installed packages\nusage: \
$ME {-f --checkfree}"
		;;

		"addlibre")
			echo -e "Add and enable the [libre] repository to pacman \
database\nusage: $ME {-L --add-libre}"
		;;
	esac
}

function checkfree ()
{
	if [[ $(type -P /usr/bin/isfrees) ]]; then
		/usr/bin/isfree -cna

	else
		nonfree=0
		for i in $(/usr/bin/pacman -Qq); do

			# Make sure the pkg does not come from [libre]
			if [[ $(/usr/bin/ls /var/cache/pacman/pkg/"$i"* 2>/dev/null\
			| /usr/bin/grep '.*.par[0-9].*\|.*.parabola[0-9].*\|.*_gnu-[0-9].*') ]]; then
				continue
			fi

			if /usr/bin/grep --color=always "^${i}:" \
			"$blacklist_file"; then
				nonfree=1
			fi
		done
			
		if [[ nonfree -eq 0 ]]; then
			echo "No non-free packages found. RMS smiles!"
		fi
	fi
}

function addlibre ()
{
	if [[ $(/usr/bin/pacman -Sl libre 2>/dev/null) ]]; then
		echo "$ME: The [libre] repository is already enabled. Nothing to do"
		exit $EXIT_SUCCESS
	fi
	
	/usr/bin/sudo /usr/bin/true
	
	keyring_url="https://www.parabola.nu/packages/libre/x86_64/parabola-keyring/download"
	mirrorlist_url="https://mirror.fsf.org/parabola/mirrorlist.txt"
		
	RFSL_OK=0
	if [[ $(/usr/bin/grep "^RemoteFileSigLevel = Never$" /etc/pacman.conf) ]]; then
		RFSL_OK=1
	fi
		
	if [[ RFSL_OK -eq 0 ]]; then
		echo -e "${blue}::$nc$bold Setting RemoteFileSigLevel to Never...$nc "
		/usr/bin/sudo /usr/bin/sed -i \
		'/RemoteFileSigLevel/a RemoteFileSigLevel = Never' \
		/etc/pacman.conf
	fi

	echo -e "${blue}::$nc$bold Installing parabola-kerying...$nc "
	/usr/bin/sudo /usr/bin/pacman -U "$keyring_url"

	if [[ RFSL_OK -eq 0 ]]; then		
		echo -e "${blue}::$nc$bold Reverting changes made to RemoteFileSigLevel...$nc "
		/usr/bin/sudo /usr/bin/sed -i '/RemoteFileSigLevel = Never/d' \
		/etc/pacman.conf
	fi

	echo -e "${blue}::$nc$bold Downloading Parabola's mirrorlist...$nc "
	/usr/bin/sudo /usr/bin/curl -so /etc/pacman.d/parabola_mirrorlist \
	"$mirrorlist_url"

	if ! [[ $(/usr/bin/grep "^[libre]$" /etc/pacman.conf) ]]; then
		echo -e "${blue}::$nc$bold Adding [libre] repository to /etc/pacman.conf...$nc "
		echo -e "\n[libre]\nInclude = /etc/pacman.d/parabola_mirrorlist" \
		| /usr/bin/sudo /usr/bin/tee -a /etc/pacman.conf 1>/dev/null
	fi

	echo -e "${blue}::$nc$bold Updating pacman database...$nc "
	/usr/bin/sudo /usr/bin/pacman -Sy

	if [[ $(/usr/bin/pacman -Sl libre 2>/dev/null) ]]; then
		echo -e "${green}->$nc$bold Successfully added [libre] repository$nc"
	else
		echoerr -e "${red}->$nc$bold Could not add [libre] repository$nc"
		exit $EXIT_FAILURE
	fi
}

function download_bl ()
{
	if ! [[ -f $blacklist_file ]]; then
		echo -ne "${green}==> ${white}Downloading packages blacklist... $nc"
		[[ $SUDO_USER ]] && user=$SUDO_USER || user=$USER

		if /usr/bin/curl -s "$source" | /usr/bin/sed 's/  //g' \
		| /usr/bin/sudo -u "$user" /usr/bin/tee /tmp/blacklist_full \
		&> /dev/null; then
			echo -e "${green}OK$nc"
		# Parse the blacklist to remove technical and branding nonfree
		#+ packs
			/usr/bin/grep ":\[semifree\]\|:\[nonfree\]\|:\[uses-nonfree\]" \
			/tmp/blacklist_full | sudo -u "$user" tee "$blacklist_file" \
			&>/dev/null
			/usr/bin/rm /tmp/blacklist_full

		else
			echoerr "\n${red}Error${nc}: try again"
			exit $EXIT_FAILURE
		fi
	fi
}

function sys_up () {

	if [[ $(type -P /usr/bin/pacrep) ]]; then
		if /usr/bin/pacrep -a; then
			exit $EXIT_SUCCESS
		else
			exit $EXIT_FAILURE
		fi
	else
		if /usr/bin/pacman "$1"; then
			return $EXIT_SUCCESS
		else
			return $EXIT_FAILURE
		fi
	fi
}

function sys_up_pkg () {
	# Update and/or upgrade the system
	if sys_up "$1" -eq 0; then
		# Rerun the program to check pkgs to be installed
		p[0]="-S"
		# Since first argument is "-S", the program will run do_sync()
		#+ over pkgs to be installed
		"$0" ${p[*]}
	fi
}

function non_sync () {
	# If nothing is to be installed
	if /usr/bin/pacman ${p[*]}; then
		exit $EXIT_SUCCESS
	else
		exit $EXIT_FAILURE
	fi
}

function do_sync () {
	OPTS=()

	while [[ ${p[$i]} == "-"* ]]; do
		OPTS[${#OPTS[*]}]=${p[$i]} # Store options
		i=$((i+1))
	done
	PKGS=( ${p[*]:1} ) # packages == non-option args

	repo=""
	for arg in "${PKGS[@]}"; do
	
		# If repo/pkg get the two values
		if [[ $arg == *"/"* ]]; then
			repo=${arg%%/*}
			pkg=${arg##*/}
		else
			pkg=$arg
		fi

		# If $repo is some of the Parabola's repos, skip the test,
		#+ since $pkg is supposed to be free
		if [[ -n $repo ]]; then
			case $repo in

				'libre'|'libre-multilib'|'kernels'|'pcr'|'cross'\
				|'nonprism'|'libre-testing'|'libre-multilib-testing'\
				|'pcr-testing'|'nonprism-testing')
					INSTALL_PKGS[${#INSTALL_PKGS[*]}]="${repo}/$pkg"
					continue
				;;

				# If not in Parabola's repo, check it against the
				#+ blacklist
				*) ;;
			esac
		fi

		# Check if $pkg is blacklisted
		blacklisted="$(/usr/bin/grep "^${pkg}:" $blacklist_file)"
		if [[ $blacklisted ]]; then
			# If blacklisted, get alternative pkg
			alternative="$(echo $blacklisted | /usr/bin/cut -d":" -f2)"
			echo -e "$nc$bold'$pkg'$nc is a non-free package\
\n$nc${bold}Description${nc}: $blacklisted\
\n$nc${bold}Alternative package${nc}: $([[ $alternative ]] && echo "$alternative" \
	|| echo "none")"
			answer="."
			valid_answers=( "y" "Y" "n" "N" )
			msg=$(echo -e "${blue}:: ${white}Do you want to install '${arg}' anyway? [y/N] $nc")
			while [[ ! " ${valid_answers[*]} " =~ " ${answer} " \
			&& $answer != "" ]]; do
				read -rp "$msg" answer
			done
			case $answer in
				""|n|N) continue;;
				y|Y) INSTALL_PKGS[${#INSTALL_PKGS[*]}]=$pkg ;;
			esac
		else # If free-software, just save the pkg to be installed
			INSTALL_PKGS[${#INSTALL_PKGS[*]}]=$pkg
		fi
	done

	# If there are pkgs to install, fire up the pac-man
	if [[ ${#INSTALL_PKGS[@]} -gt 0 ]]; then
		if [[ $(type -P /usr/bin/pacrep) ]]; then
			if ! /usr/bin/pacrep -s "${INSTALL_PKGS[@]}"; then
				exit $EXIT_FAILURE
			fi
		else
			if ! /usr/bin/pacman "${OPTS[*]}" "${INSTALL_PKGS[*]}"; then
				exit $EXIT_FAILURE
			fi
		fi
	fi
}

function main ()
{
	case "$2" in

		# Modified version of pacman help (A)
		-h|--help)
			case "$1" in

				-f|--checkfree) help "checkfree" ;;

				-L|--add-libre) help "addlibre" ;;

				*) /usr/bin/pacman "$1" --help ;;
			esac

			exit $EXIT_SUCCESS ;;
	esac

	case "$1" in
		
		# Modified version of pacman help (B)
		''|-h|--help)
			help "help"
			exit $EXIT_SUCCESS ;;
		
		-V|--version)
			printf "%-23s$ME v%s (%s, by %s)" "" "$VERSION" "$DATE" \
			"$AUTHOR"
			/usr/bin/pacman --version
			exit $EXIT_SUCCESS ;;

		# Added functions
		-f|--checkfree)
			checkfree
			exit $EXIT_SUCCESS
		;;
		
		-L|--add-libre)
			addlibre
			exit $EXIT_SUCCESS
		;;
	esac

	# Download the blacklist, if it doesn't exist
	download_bl

	p=( $@ )

	# This case statement covers only the most common cases of software 
	#+ installation. For more complex cases like when setting a new 
	#+ database or a new root location (even when using some simple 
	#+ combination like -Sq or -Sv), simply use /usr/bin/pacman after 
	#+ making sure that whatever you want to install is free. Take a 
	#+ look at my "isfree" script: https://github.com/leo-arch/isfree

	case ${p[*]} in

		-Syu|-Suy|-Su)
			if sys_up ${p[0]} -eq 0; then
				exit $EXIT_SUCCESS
			else
				exit $EXIT_FAILURE
			fi
		;;

		"-Syu "*|"-Suy"*|"-Sy "*|"-Su "*) sys_up_pkg ${p[0]} ;;

		"-S "*|"--sync "*) do_sync ;;

		*) non_sync ;;
	esac
}

### MAIN ###

main $@

exit $EXIT_SUCCESS
