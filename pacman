#!/bin/sh
#Little pacman wrapper to make pacman free-software aware (only for packages 
#+installation) It also adds two new options to pacman:  -c | --check, to check 
#+for non-free installed packages, and -Z | --size to list packages by size

##COLORS##
white="\033[1;37m"
green="\033[1;32m"
red="\033[1;31m"
yellow='\033[1;33m'
nc="\033[0m"

PROGRAM_NAME="Free-Pacman"
VERSION="1.2"
AUTHOR="L. M. Abramovich"
DATE="Nov, 2018"
user="$([[ $SUDO_USER ]] && echo $SUDO_USER || echo $USER)"
source="https://git.parabola.nu/blacklist.git/plain/blacklist.txt"
blacklist_file="/tmp/pacman_pkgs_bl"

function help
{
	arg=$1
	case $arg in
		help)
			echo -e "${PROGRAM_NAME}, the free-software aware pacman\nusage:  pacman <operation> [...]
operations:
	pacman {-h --help}
	pacman {-V --version}
	pacman {-D --database}  <options> <package(s)>
	pacman {-F --files}     [options] [package(s)]
	pacman {-Q --query}     [options] [package(s)]
	pacman {-R --remove}    [options] <package(s)>
	pacman {-S --sync}      [options] [package(s)]
	pacman {-T --deptest}   [options] [package(s)]
	pacman {-U --upgrade}   [options] <file(s)>
	pacman {-Z --size}      [limit]   [package(s)]
	pacman {-C --check}
	pacman {-d --downgrade} [package]

use 'pacman {-h --help}' with an operation for available options" ;;
		check)
			echo -e "List all non-free installed packages\nusage: pacman {-C --check}" ;;
		size)
			echo "Get installed package(s) size"
			echo -e "\nUsage: pacman -Z [limit] [pkg_name pkg_name ...]"
			echo -e "\nWith no arguments, all installed packages size in \
ascending order plus a grand total will be shown. If the first argument is a number \
('limit'), only the 'limit' largest installed packages will be shown.\n" ;;
		downgrade) echo -e "Usage: pacman -d pkg_name";;
	esac
}

#Modified version of pacman help
case $1 in
	-h|--help)
		case $2 in
			"") help "help" ;;
			-C|--check) help "check" ;;
			-Z|--size) help "size" ;;
			-d|--downgrade) help "downgrade";;
			*) help "help" ;;
		esac
		exit 0 ;;
	-V|--version)
		printf "%-23sFree-Pacman v%s (%s, by %s)" "" "$VERSION" "$DATE" "$AUTHOR"
		/usr/bin/powerpill --version
		exit 0 ;;
esac

#Download blacklist, if it doesn't exist yet
if ! [[ -f $blacklist_file ]]; then
	echo -ne "${green}==> ${white}Downloading packages blacklist... $nc"
	sudo -u $user curl -s $source | sed 's/  //g' > $blacklist_file
	#or 'wget -qO $blacklist_file $source'. I choose curl because: curl is in 'core', while 
	#+wget is in 'extra'; curl is required by 'pacman', whereas wget by 'playonlinux'. Differently
	#+put: curl, unlike wget, will necessarilly be there in all Arch Linux systems.
	if [[ $? -eq 0 ]]; then 
		echo -e "${green}OK$nc"
	else
		echo -e "\n${red}Error${nc}: try again"
		exit 1
	fi
fi

#Added functions
if [[ $1 == "-C" || $1 == "--check" ]]; then
#	while read line; do
#		blacklisted="$(grep "^$line" $blacklist_file)"		
#		[[ $blacklisted ]] && echo $blacklisted | grep --color=always "^${line}:"
#	done <<< $(pacman -Qqn)
	[[ ! $(command -v isfree) ]] && echo "isfree not found" && exit 1
	isfree -o
	exit 0
fi

if [[ $1 == "-Z" || $1 == "--size" ]]; then
	[[ $2 == "--help" || $2 == "-h" ]] && help "size" && exit 0
	[[ ! $(command -v pacsize) ]] && echo "Pacsize not found" && exit 1
	shift
	pacsize $@
	exit 0
fi

if [[ $1 == "-d" || $1 == "--downgrade" ]]; then
	[[ ! $(command -v pacgrade) ]] && echo "Pacgrade not found" && exit 1
	[[ -z $2 ]] && echo "Argument missing" && exit 1
	pacgrade $2
	exit 0
fi

#+If not -S, just run the intended command
if [[ $@ != "-S "* && $@ != "--sync "* ]]; then 
	/usr/bin/pacman $@
	exit 0
fi

#If -S, check all parameters, except "-S", that is, all pkgs to be installed, against the 
#+blacklist
shift
for arg in "$@"; do
	#If non-free, warn the user
	blacklisted="$(grep "^${arg}:" $blacklist_file)"
	if [[ $blacklisted ]]; then
		alternative="$(echo $blacklisted | cut -d":" -f2)"
		echo -e "${white}'$arg'$nc is a ${red}non-free${nc} package\
\n${yellow}Description${nc}: $blacklisted\
\n${green}Alternative package${nc}: $([[ $alternative ]] && echo "$white$alternative$nc" \
|| echo "none")"
		answer="."
		valid_answers=( "y" "Y" "n" "N" )
		while [[ ! " ${valid_answers[@]} " =~ " ${answer} " && $answer != "" ]]; do
			read -p "Do you want to install '$arg' anyway? [y/N] " answer
		done
		case $answer in
			""|n|N) continue;;
			y|Y) INSTALL_PKGS[${#INSTALL_PKGS[@]}]=$arg;;
		esac
	else #if free-software, just fire up the command
		INSTALL_PKGS[${#INSTALL_PKGS[@]}]=$arg
	fi
done
[[ ${#INSTALL_PKGS[@]} -gt 0 ]] && /usr/bin/pacman -S ${INSTALL_PKGS[@]}

exit 0
